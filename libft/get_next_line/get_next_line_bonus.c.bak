/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   get_next_line_bonus.c                              :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: moajili <moajili@student.42mulhouse.fr>    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2023/11/27 14:35:06 by hclaude           #+#    #+#             */
/*   Updated: 2024/02/02 21:51:57 by moajili          ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "get_next_line_bonus.h"

/*static int	is_backslash(char *buffer)
{
	static unsigned int	i = 0;
	unsigned int temp_i;

	temp_i = 0;
	while (buffer[i])
	{
		if ('\n' == buffer[i])
		{
			temp_i = i;
			i = 0;
			return (temp_i);
		}
		i++;
	}
	return (-1);
}

static void	replace(char **buffer)
{
	int		i;
	char	*new_buffer;

	i = is_backslash(*buffer);
	new_buffer = ft_substr(*buffer, i + 1, ft_strlen(*buffer) - i);
	free(*buffer);
	*buffer = new_buffer;
}

static int	read_and_get(int fd, char **buffer)
{
	char	*new_str;
	char	*new_buffer;
	ssize_t	n_read;

	new_buffer = NULL;
	new_str = ft_calloc(sizeof(char), BUFFER_SIZE + 1);
	if (!new_str)
		return (1);
	while (is_backslash(*buffer) == -1)
	{
		n_read = read(fd, new_str, BUFFER_SIZE);
		if (n_read == -1)
			return (free(new_str), free(new_buffer), -1);
		else if (n_read == 0)
			return (free(new_str), 1);
		new_buffer = ft_strjoin(*buffer, new_str);
		free(*buffer);
		*buffer = new_buffer;
		if (!*buffer)
			return (free(new_str), -1);
		ft_bzero(new_str, BUFFER_SIZE);
	}
	return (free(new_str), 0);
}

static char	*get_next_line_part2(int fd, char **buffer)
{
	char	*return_line;
	int		empty;

	empty = read_and_get(fd, buffer);
	if (empty == -1)
	{
		free(*buffer);
		*buffer = NULL;
		return (*buffer);
	}
	if (empty == 0)
	{
		return_line = ft_substr(*buffer, 0, is_backslash(*buffer) + 1);
		replace(buffer);
		if (!return_line && *buffer)
			return (free(*buffer), *buffer = NULL, NULL);
		return (return_line);
	}
	if (!buffer || *buffer[0] == '\0')
		return_line = NULL;
	else
		return_line = ft_substr(*buffer, 0, ft_strlen(*buffer));
	free(*buffer);
	*buffer = NULL;
	return (return_line);
}*/

/**
 * A function that returns the next line from a give fd.
 * 
 * @param fd File Descriptor.
 * @return char* The next line.
 */
/*char	*get_next_line(int fd)
{
	static char	*buffer[1024];
	
	
	if (fd < 0 || BUFFER_SIZE < 0 || fd >= 1024)
		return (NULL);
	if (!buffer[fd])
		buffer[fd] = ft_calloc(sizeof(char), BUFFER_SIZE + 1);
	if (!buffer[fd])
		return (NULL);
	return (get_next_line_part2(fd, &buffer[fd]));
}*/

static int is_backslash(GNLState *state) {
    unsigned int temp_i = state->i;
	
    while (state->buffer[temp_i]) {
        if ('\n' == state->buffer[temp_i]) {
            state->i = 0;
            return temp_i;
        }
        temp_i++;
    }
    return -1;
}


static void replace(GNLState *state) {
    int i = is_backslash(state);
    char *new_buffer = state->buffer ? ft_strdup(state->buffer + i + 1) : NULL;
    free(state->buffer);
    state->buffer = new_buffer;
}

static int read_and_get(int fd, GNLState *state) {
    char *new_str;
    char *new_buffer;
    ssize_t n_read;

    new_buffer = NULL;
    new_str = ft_calloc(sizeof(char), BUFFER_SIZE + 1);
    if (!new_str)
        return 1;

    while (is_backslash(state) == -1) {
        n_read = read(fd, new_str, BUFFER_SIZE);
        if (n_read == -1)
            return (free(new_str), free(new_buffer), -1);
        else if (n_read == 0)
            return (free(new_str), 1);

        new_buffer = ft_strdup(state->buffer);
        free(state->buffer);
        state->buffer = ft_strjoin(new_buffer, new_str);
        free(new_buffer);
        if (!state->buffer)
            return (free(new_str), -1);
        ft_memset(new_str, 0, BUFFER_SIZE);
    }

    return (free(new_str), 0);
}

static char *get_next_line_part2(int fd, GNLState *state) {
    char *return_line;
    int empty = read_and_get(fd, state);

    if (empty == -1) {
        free(state->buffer);
        state->buffer = NULL;
        return state->buffer;
    }

    if (empty == 0) {
        return_line = ft_strndup(state->buffer, is_backslash(state) + 1);
        replace(state);
        if (!return_line && state->buffer)
            return (free(state->buffer), state->buffer = NULL, NULL);
        return return_line;
    }

    if (!state->buffer || state->buffer[0] == '\0') {
        return_line = NULL;
    } else {
        return_line = ft_strdup(state->buffer);
    }
    free(state->buffer);
    state->buffer = NULL;
    return return_line;
}

char *get_next_line(int fd) {
    static GNLState state[1024] = {{NULL, 0}};

    if (fd < 0 || BUFFER_SIZE < 0 || fd >= 1024)
        return NULL;

    if (!state[fd].buffer)
        state[fd].buffer = ft_calloc(sizeof(char), BUFFER_SIZE + 1);

    if (!state[fd].buffer)
        return NULL;

    return get_next_line_part2(fd, &state[fd]);
}